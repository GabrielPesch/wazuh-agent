run-name: Package Wazuh agent binaries Linux ${{ inputs.architecture }} - ${{ inputs.system }} ${{ inputs.is_stage && ' - is stage' || '' }}${{ inputs.checksum && ' - checksum' || '' }} - ${{ inputs.id }}
name: Package Wazuh agent binaries Linux

on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: |
          Specify the docker tag used to build the package.
          Use 'developer' to set branch name as tag.
          Use 'auto' to set branch version as tag.
          Default is 'auto'.
        required: false
        default: 'auto'
      architecture:
        type: choice
        description: Package architecture [amd64, arm64, x86_64, aarch64].
        required: true
        options:
          - amd64
          - arm64
          - x86_64
          - aarch64
      system:
        type: choice
        description: Package OS [deb, rpm].
        required: true
        options:
          - deb
          - rpm
      revision:
        description: |
          Package revision (name and metadata).
          Default is '0'.
        required: false
        default: '0'
      is_stage:
        type: boolean
        description: |
          Set production nomenclature if true.
          Default is 'false'.
        required: false
      checksum:
        type: boolean
        description: |
          Generate package checksum.
          Default is 'false'.
        required: false
      source_reference:
        description: |
          Branch from wazuh/wazuh-agent repository to use.
        required: true
      upload_to_s3:
        type: boolean
        description: |
          Upload generated package to S3.
          Default is 'false'.
        default: false
        required: false
      id:
        type: string
        description: |
          ID used to identify the workflow uniquely.
        required: false

  workflow_call:
    inputs:
      docker_image_tag:
        type: string
        required: false
        default: 'auto'
      architecture:
        type: string
        required: true
      system:
        type: string
        required: true
      revision:
        type: string
        required: false
      is_stage:
        type: boolean
        required: false
      checksum:
        type: boolean
        required: false
      source_reference:
        type: string
        required: true
      upload_to_s3:
        type: boolean
        required: true
      id:
        type: string
        required: false

jobs:
  Build-agent-linux-packages:
    runs-on: ${{ (inputs.architecture == 'arm64' || inputs.architecture == 'aarch64') && 'wz-linux-arm64' || 'ubuntu-latest' }}
    timeout-minutes: 25
    name: Package Wazuh agent binaries Linux ${{ inputs.architecture }} - ${{ inputs.system }}  - agent packages ${{ inputs.is_stage && ' - is stage' || '' }}${{ inputs.checksum && ' - checksum' || '' }} - ${{ inputs.id }}
    
    steps:
      - name: Download wazuh-agent-binaries-${{ inputs.architecture }}.zip
        uses: actions/download-artifact@v4
        with:
          name: wazuh-agent-binaries-${{ inputs.architecture }}

      - name: Unzip precompiled repository
        run: |
          sudo unzip wazuh-agent-binaries-${{ inputs.architecture }}.zip -d /

      - name: Set ARCH, TAG and DOCKER_IMAGE_NAME
        uses: ./.github/actions/docker_set_arch_tag_and_image_name
        with:
          system: ${{ inputs.system }}
          architecture: ${{ inputs.architecture }}
          docker_image_tag: ${{ inputs.docker_image_tag }}
          source_reference: ${{ inputs.source_reference }}

      - name: Fetch needed Docker image
        uses: ./.github/actions/docker_pull_image
        with:
          gh_user: ${{ github.actor}}
          gh_token: ${{ github.token}}
          docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          docker_image_tag: ${{ env.TAG }}

      - name: Build ${{ inputs.system }} wazuh-agent on ${{ env.ARCH }}
        run: |
          REVISION=${{ inputs.revision }}
          FLAGS="--verbose -s /tmp --dont-build-docker -j $(nproc) "
          if [ -z "$REVISION" ]; then FLAGS+="-r 0 "; else FLAGS+="-r $REVISION "; fi
          if [ "${{ inputs.is_stage }}" == "true" ]; then FLAGS+="--is_stage "; fi
          if [ "${{ inputs.checksum }}" == "true" ]; then FLAGS+="--checksum "; fi
          echo "generate_package.sh -a ${{ env.ARCH }} --tag ${{ env.TAG }} --system ${{ inputs.system }} $FLAGS"
          sudo bash packages/generate_package.sh -a ${{ env.ARCH }} --tag ${{ env.TAG }} --system ${{ inputs.system }} $FLAGS
          echo "PACKAGE_NAME=$(find /tmp -maxdepth 1 -type f -name *agent*.${{ inputs.system }} -exec basename {} 2>/dev/null \;| grep -v -E "^(wazuh-agent-dbg|wazuh-agent-debuginfo)")" | tee -a $GITHUB_ENV

      - name: Test package installation
        uses: ./.github/actions/test-install-components
        with:
          system: ${{ inputs.system }}
          architecture: ${{ (inputs.architecture == 'arm64' || inputs.architecture == 'aarch64') && 'arm64' || 'amd64' }}
          tested_docker: ${{ inputs.system == 'deb' && 'ubuntu:22.04' || 'rockylinux:9' }}

      - name: Set up AWS CLI
        if: ${{ inputs.upload_to_s3 }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: ${{ secrets.CI_AWS_REGION }}

      - name: Upload package to S3
        if: ${{ inputs.upload_to_s3 }}
        run: |
          s3_package_uri="s3://packages-dev.internal.wazuh.com/development/wazuh/5.x/main/packages"; echo "S3_PACKAGE_URI=$s3_package_uri" | tee -a $GITHUB_ENV
          if [ -s /tmp/${{ env.PACKAGE_NAME }} ]; then
            aws s3 cp /tmp/${{ env.PACKAGE_NAME }} $s3_package_uri/
            s3uri="$s3_package_uri/${{ env.PACKAGE_NAME }}"
            echo "S3 URI: ${s3uri}"
          else
            echo "Package file is empty or does not exist."
            exit 1
          fi

      - name: Upload checksums to S3
        if: ${{ inputs.upload_to_s3 && inputs.checksum }}
        run: |
          if [ -s /tmp/${{ env.PACKAGE_NAME }}.sha512 ]; then
            aws s3 cp /tmp/${{ env.PACKAGE_NAME }}.sha512 ${{ env.S3_PACKAGE_URI }}/
            s3uri="${{ env.S3_PACKAGE_URI }}/${{ env.PACKAGE_NAME }}.sha512"
            echo "S3 sha512 URI: ${s3uri}"
          else
            echo "Checksum file is empty or does not exist."
            exit 1
          fi

      - name: Upload package to artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: /tmp/${{ env.PACKAGE_NAME }}

      - name: Upload checksums to artifact
        if: ${{ inputs.checksum }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}.sha512
          path: /tmp/${{ env.PACKAGE_NAME }}.sha512
